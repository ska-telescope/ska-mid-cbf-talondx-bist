#!/bin/sh

# INFO: This script should be placed in the path (/bin) 
#
# The script is responsible for the following actions from HPS:
# - Start the BIST systemd service
# - Verify the BIST systemd service has started
# - Verify that the files are placed at the correct location
# - Stop the BIST service before it is executed on bootup
# - Modify/Show the start-up delay of the BIST sytemd service
# - Print the results of the BIST to console
# - Run the BIST again
# - Verify the python packages that are needed are pre-installed

# path of the BIST source files
BIST_SRC_PATH="/home/root/packages"
# path of the BIST systemd service
BIST_SERVICE_PATH="/etc/systemd/system"
# path of the BIST bitstream archive
BIST_ARCHIVE=$BIST_SRC_PATH/*.tar.gz
# path of the BIST bitstream for programming to trigger the overlay
BIST_BITSTREAM_PATH="/sys/kernel/config/device-tree/overlays"

verify_bist_service_files() {
    # verify the required systemd service files are placed at right location
}

verify_bist_bitstream_files() {
    # verify the required bitstream files are placed at right location
}

verify_bist_files(){
    # verify all bist files
}

verify_bist_service() {
    #returns 0 if the service has been started
    local status=$(systemctl is-active --quiet $BIST_SERVICE_PATH/bist.timer)
    return $status;
}

start_bist_service() {
    echo "Enabling BIST service via systemd"
    systemctl enable $BIST_SERVICE_PATH/bist.timer
    local status=verify_bist_service
    return $status
}

stop_bist_service() {
    echo "Stopping BIST service via systemd"
    systemctl disable $BIST_SERVICE_PATH/bist.timer
    local status=verify_bist_service
    return $status
}

program_bist_bitstream() {
    echo "Programming the BIST bitstream..."
    bs_core=`tar --wildcards --get -vf $BIST_ARCHIVE *.rbf`
    dtb=`tar --wildcards --get -vf $BIST_ARCHIVE *.dtb`
    
    rmdir $BIST_BITSTREAM_PATH/*
    mkdir $BIST_BITSTREAM_PATH/base
    echo $BIST_ARCHIVE/$dtb > $BIST_BITSTREAM_PATH/base/path
    dmesg | tail -n 3
    
    return 0
}

execute_bist() {
    json=`tar --wildcards --get -vf $BIST_ARCHIVE *.json`
    python3 $BIST_SRC_PATH/run_bist_tests.py $BIST_SRC_PATH/talon_dx-tdc_base.json $BIST_SRC_PATH/tdc.ipmap
    return 0
}

run_bist() {
    program_bist_bitstream
    execute_bist
    return 0
}

get_bist_results() {
    #print the results of the bist
    return 0
}

modify_bist_start_delay() {
    echo "setting the BIST start-up delay to ${1} seconds"
    #modify the start of the service by X seconds
}

usage() {
    echo "usage:"
    echo -e "-s \tStart the BIST systemd service"
    echo -e "-k \tKill the BIST systemd service"
    echo -e "-r \tRun the BIST"
    echo -e "-m <time in seconds>\tModify the BIST systemd start delay time by [time]"
    echo -e "-h \tDisplay the help message"
    echo -e "-v \tVerify the BIST files are installed correctly"
}

while getopts ":hskrm:v" arg; do
    case $arg in
        s)
            status=start_bist_service
            if [ $status ] then;
                echo "Error starting the BIST service - $status"
            fi
            ;;
        k)
            status=stop_bist_service
            if [ $status ] then;
                echo "Error killing the BIST service - $status"
            fi
            ;;
        r)
            run_bist
            ;;
        m)
            start_delay=${OPTARG}
            modify_bist_start_delay $start_delay
            ;;
        v)
            ;;
        h)
            usage
            ;;
        :)
            usage
            ;;
        *)
            usage
            ;;
    esac
done