#!/bin/sh

# The script is responsible for the following actions from HPS:
# - Start the BIST systemd service
# - Verify the BIST systemd service has started
# - TODO: Verify that the files are placed at the correct location
# - Stop the BIST service before it is executed on bootup
# - Modify/Show the start-up delay of the BIST sytemd service
# - TODO: Print the results of the BIST to console
# - Run the BIST again
# - TODO: Verify the python packages that are needed are pre-installed

# path of the BIST source files
BIST_SRC_PATH="/home/root/packages/bist"
# list of BIST source files
BIST_SRC_FILES="*.tar.gz *.ipmap"
# path of the BIST systemd service
BIST_SERVICE_PATH="/etc/systemd/system"
# list of systemd service files
BIST_SERVICE_FILES="bist.service bist.timer"
# path of the BIST bitstream archive
BIST_ARCHIVE=$BIST_SRC_PATH/*.tar.gz
# path of the BIST bitstream for programming to trigger the overlay
BIST_BITSTREAM_PATH="/sys/kernel/config/device-tree/overlays"

verify_bist_service_files() {
    # verify that the required systemd service files are placed at right location
    local res=0
    local verbosity=$1
    for file in $BIST_SERVICE_FILES; do
        if ! [ -f $BIST_SERVICE_PATH/$file ]; then
            if [ $verbosity ]; then
                echo "$BIST_SERVICE_PATH/$file not found at $BIST_SERVICE_PATH"
            fi
            res=1
        fi
    done
    return $res
}

verify_bist_bitstream_files() {
    # verify that the required bitstream files are placed at right location
    local res=0
    local verbosity=$1
    for file in $BIST_SRC_FILES; do
        if ! [ -f $BIST_SRC_PATH/$file ]; then
            if [ $verbosity ]; then
                echo "$BIST_SRC_PATH/$file not found at $BIST_SRC_PATH"
            fi
            res=1
        fi
    done
    return $res
}

verify_bist_files() {
    # verify all bist files dependencies
    local verbosity=$1
    local res=0
    verify_bist_service_files $verbosity
    if [ $? -gt 0 ]; then
        res=1
    fi
    verify_bist_bitstream_files $verbosity
    if [ $? -gt 0 ]; then
        res=1
    fi
    return $res
}

verify_bist_service() {
    local res=$(systemctl is-active $BIST_SERVICE_PATH/bist.timer)
    echo $res
}

start_bist_service() {
    echo "Activating BIST service via systemd"
    systemctl enable $BIST_SERVICE_PATH/bist.timer
    return $?
}

stop_bist_service() {
    echo "Stopping BIST service via systemd"
    systemctl disable --now $BIST_SERVICE_PATH/bist.timer #disable and stop immediately
    return $?
}

program_bist_bitstream() {
    echo "Programming the BIST bitstream..."
    bs_core=`tar --wildcards --get -vf $BIST_ARCHIVE *.rbf`
    dtb=`tar --wildcards --get -vf $BIST_ARCHIVE *.dtb`
    
    rmdir $BIST_BITSTREAM_PATH/*
    mkdir $BIST_BITSTREAM_PATH/base
    echo $BIST_ARCHIVE/$dtb > $BIST_BITSTREAM_PATH/base/path
    dmesg | tail -n 3

    return 0
}

execute_bist() {
    #TODO check if the files are there
    json=`tar --wildcards --get -vf $BIST_ARCHIVE *.json`
    python3 $BIST_SRC_PATH/run_bist_tests.py $BIST_SRC_PATH/talon_dx-tdc_base.json $BIST_SRC_PATH/tdc.ipmap
    return 0
}

run_bist() {
    verify_bist_bitstream_files true
    local res=$?
    if [ $res -eq 0 ]; then
        program_bist_bitstream
        execute_bist
    fi
    return $res
}

get_bist_results() {
    #print the results of the BIST
    #TODO
    return 0
}

get_bist_start_delay() { 
    verify_bist_service_files true
    if [ $? -eq 0 ]; then
        local val=$(cat $BIST_SERVICE_PATH/bist.timer | grep seconds)
        echo $val
    fi
}

modify_bist_start_delay() {
    verify_bist_service_files true
    if [ $? -eq 0 ]; then
        echo "Setting the BIST start-up delay to ${1} seconds"
        sed -i "/OnBootSec=/c\OnBootSec=${1}seconds" $BIST_SERVICE_PATH/bist.timer
    fi
}

usage() {
    echo "Usage:"
    echo -e "-s             Start the BIST systemd service"
    echo -e "-k             Kill the BIST systemd service immediately, aborting the BIST"
    echo -e "-r             Run the BIST"
    echo -e "-m <time>      Modify the BIST systemd start delay time by <time>"
    echo -e "-t             Show the current BIST systemd start delay time"
    echo -e "-h             Display the help message"
    echo -e "-v             Verify the BIST files are installed correctly"
}

while getopts ":hskrm:vt" arg; do
    case $arg in
        s)
            start_bist_service
            if [ $? -gt 0 ]; then
                echo "Error starting the BIST service - $status"
            fi
            ;;
        k)
            stop_bist_service
            if [ $? -gt 0 ]; then
                echo "Error killing the BIST service - $status"
            fi
            ;;
        r)
            run_bist
            ;;
        t)
            get_bist_start_delay
            ;;
        m)
            start_delay=${OPTARG}
            if [[ "$start_delay" =~ [^0-9] ]]; then #check if the argument passed is only digits
                echo "delay has to be a positive integer in seconds"
            else
                modify_bist_start_delay $start_delay
                get_bist_start_delay
            fi
            ;;
        v)
            verify_bist_files true
            ;;
        h)
            usage
            ;;
        :)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

# In case no options were passed
if [ $OPTIND -eq 1 ]; then usage; fi